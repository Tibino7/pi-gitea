apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "postgres.fullname" . }}
  labels:
    app: {{ template "postgres.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  serviceName: {{ template "postgres.fullname" . }}
  replicas: 1
  selector:
    matchLabels:
      app: {{ template "postgres.fullname" . }}
  template:
    metadata:
      labels:
        app: {{ template "postgres.fullname" . }}
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      containers:
        - name: postgres
          image: "{{ .Values.images.postgres }}"
          imagePullPolicy: {{ default "" .Values.images.imagePullPolicy | quote }}
          args:
            {{- range $key, $value := default dict .Values.postgres.postgresConfig }}
            - -c
            - '{{ $key | snakecase }}={{ $value }}'
            {{- end }}
          env:
            - name: POSTGRES_USER
              value: {{ default "postgres" .Values.postgres.postgresUser | quote }}
            - name: PGUSER
              value: {{ default "postgres" .Values.postgres.postgresUser | quote }}
            - name: POSTGRES_DB
              value: {{ default "" .Values.postgres.postgresDatabase | quote }}
            - name: POSTGRES_INITDB_ARGS
              value: {{ default "" .Values.postgres.postgresInitdbArgs | quote }}
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "db.fullname" . }}
                  key: dbPassword
            - name: POD_IP
              valueFrom: { fieldRef: { fieldPath: status.podIP } }
          ports:
            - name: postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - exec pg_isready --host $POD_IP
            initialDelaySeconds: 120
            timeoutSeconds: 5
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - exec pg_isready --host $POD_IP
            initialDelaySeconds: 5
            timeoutSeconds: 3
            periodSeconds: 5
          resources:
{{ toYaml .Values.resources.postgres | indent 12 }}
          volumeMounts:
            - name: {{ template "postgres.fullname" . }}
              mountPath: {{ .Values.postgres.dataMountPath }}
              subPath: {{ .Values.postgres.subPath }}
{{- if .Values.usePasswordFile }}
            - name: password-file
              mountPath: /conf
              readOnly: true
{{- end }}
      initContainers:
        - name: init-postgres
          image: "{{ .Values.images.postgres }}"
          imagePullPolicy: {{ .Values.images.imagePullPolicy }}
          env:
            - name: POSTGRES_USER
              value: {{ default "postgres" .Values.postgres.postgresUser | quote }}
            - name: PGUSER
              value: {{ default "postgres" .Values.postgres.postgresUser | quote }}
            - name: POSTGRES_DB
              value: {{ default "" .Values.postgres.postgresDatabase | quote }}
            - name: POSTGRES_INITDB_ARGS
              value: {{ default "" .Values.postgres.postgresInitdbArgs | quote }}
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "db.fullname" . }}
                  key: dbPassword
            - name: POSTGRES_INIT_SCRIPT
              value: &POSTGRES_INIT_SCRIPT |-
                  echo "checking postresql for existence of db: $DATABASE";
                  DB_EXIST=$(psql -lqt -w | cut -d \| -f 1 | grep ${DATABASE} | sed 's: ::g');
                  echo "db exists ${DB_EXIST}:${DATABASE}";
                  if [ "${DB_EXIST}" != "${DATABASE}" ]; then
                      psql -c "CREATE DATABASE ${DATABASE}";
                  else
                      echo "existing database detected."
                  fi
          command: ["/bin/bash"]
          args: ["-c", *POSTGRES_INIT_SCRIPT]
  volumeClaimTemplates:
    - metadata:
        name: {{ template "postgres.fullname" . }}
      spec:
        accessModes: 
          - ReadWriteOnce
        storageClassName: "{{ .Values.persistence.storageClass }}" 
        resources:
          requests:
            storage: "{{ .Values.persistence.postgresSize }}"
